name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "The next version to set"
jobs:
  publish:
    runs-on: ubuntu-20.04
    environment: release
    timeout-minutes: 5
    steps:
    #   - name: Generate a token
    #     id: generate-token
    #     uses: actions/create-github-app-token@v1
    #     with:
    #       app-id: ${{ vars.APP_ID }}
    #       private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        # with:
        #   token: ${{ steps.generate-token.outputs.token }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Git Config
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NAME=$(gh api users/$GITHUB_ACTOR --jq '.name')
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config user.name "$NAME"

      - name: Bump the version
        run: |
          current=$(python setup.py --version)
          sed -i "s/version = \"$current\"/version = \"${{inputs.version}}\"/" pyproject.toml
          git tag -a ${{inputs.version}} -m "bump ${{inputs.version}}"
          git add .
          git commit -a -m "bump ${{inputs.version}}"
          #git push origin
          #git push origin --tags

      - name: Build the assets
        uses: ./.github/actions/build

      - name: Publish the assets
        run: echo "published!"

      - name: Annotate
        run: |
            NAME=$(git for-each-ref ${{inputs.version}} --shell --format='%(taggername)')
            SHA=$(shasum -a 256 LICENSE | awk '{print $1;}')

            echo "Product: Test Annotated Project"
            echo "Version: $GITHUB_REF_NAME"
            echo "Releaser: $NAME"
            echo "Filename: LICENSE"
            echo "SHASUM: $SHA"

      - name: Get Job ID from GH API
        id: get-job-id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs)
          job_id=$(echo $jobs | jq -r '.jobs[] | select(.runner_name=="${{ runner.name }}") | .id')
          echo "job_id=$job_id" > metadata.txt

      - name: Create a draft release 
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ inputs.version }} --draft --title ${{ inputs.version }} --notes ""
          gh release upload ${{ inputs.version }} metadata.txt

    
